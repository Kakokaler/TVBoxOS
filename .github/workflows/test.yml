name: Test

on:
  schedule:
    - cron: 0 13 1 * *
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: q215613905
            repoName: TVBoxOS
            branchName: main
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check New Commit
        run: |
          upStream=https://github.com/${{ matrix.userName }}/${{ matrix.repoName }}
          echo "upStream=$upStream" >> $GITHUB_ENV
          commit=$(curl -sL $upStream/commits/${{ matrix.branchName }} |grep -o "/${{ matrix.userName }}/${{ matrix.repoName }}/commit/[a-z0-9]\+" |head -1 | cut -d\/ -f5)
          if [[ -z "${commit}" ]]; then
            commit=$(curl -s "https://api.github.com/repos/${{ matrix.userName }}/${{ matrix.repoName }}/commits/${{ matrix.branchName }}?per_page=1" | jq -r '.sha' )
          fi
          if ! grep -q "$commit" README.md || [ "${{ inputs.rebuild }}" == "true" ]; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
          fi
          echo "commit=$commit"
      - name: Checkout Source Code
        if: ${{ env.commit }}
        run: |
          git clone ${{ env.upStream }} TVBoxOSC
          cd TVBoxOSC
          git checkout ${{ env.commit }}
          echo "tag=$(git log --date=format:'%Y%m%d-%H%M' --pretty=format:%cd ${{ env.commitS }} -1)" >> $GITHUB_ENV
      - name: Create local.properties # 创建 local.properties 文件
        if: ${{ env.commit }}
        working-directory: TVBoxOSC # 确保这是Android项目的根目录
        run: |
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > local.properties
          # 如果你的项目使用NDK，可能也需要指定NDK路径
          # echo "ndk.dir=${ANDROID_NDK_HOME}" >> local.properties
          echo "已创建 local.properties 文件，SDK 路径: ${ANDROID_SDK_ROOT}"
      - name: Set up Python
        if: ${{ env.commit }} # 根据你的逻辑决定是否需要 env.commit 条件
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # 尝试使用 Python 3.9。如果不行，可以试试 '3.8' 或 '3.10'
      - name: Extra Modify
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          echo '修改VersionName'
          if [ "${{ matrix.userName }}" == "takagen99" ]; then
            sed -i 's/\.concat(buildTime())/ +\"${{ env.tag }}\"/g' app/build.gradle
            sed -i "/android:text=/s#=\"#=\"${{ env.tag }}\\\\n\\\\n#" app/src/main/res/layout/dialog_about.xml
          else
            sed -i "/versionName/s#[0-9a-zA-Z_\.\'\"-]\+\$#\'${{ env.tag }}\'#" app/build.gradle
            sed -i "/android:text=/s#=\"#=\"${{ env.tag }}\\\\n\\\\n#" app/src/main/res/layout/dialog_about.xml
          fi
          echo 'crosswalk源，防挂'
          if grep -q 'crosswalk' build.gradle; then
            sed -i "/crosswalk/a\          maven { url 'https://o0halflife0o.github.io/crosswalk/releases/crosswalk/android/maven2' }" build.gradle
          else
            sed -i "/jitpack.io/a\          maven { url 'https://o0halflife0o.github.io/crosswalk/releases/crosswalk/android/maven2' }" build.gradle
          fi

          # --- 针对 Chaquopy 的修改 ---
          echo '修正Chaquopy的buildPython路径'
          # 确认 PYRAMID_GRADLE_FILE 路径正确无误
          PYRAMID_GRADLE_FILE="pyramid/build.gradle"

          if [ -f "$PYRAMID_GRADLE_FILE" ]; then
            # 使用更新后的 sed 命令注释掉 buildPython 行
            sed -i -E "s#^[[:space:]]*(buildPython\s*\(.*\))#// \1#" "$PYRAMID_GRADLE_FILE"
            echo "已尝试注释掉 $PYRAMID_GRADLE_FILE 中的 buildPython 设置。"

            # 验证修改 (可选, 用于调试)
            echo "--- 修改后的 $PYRAMID_GRADLE_FILE 内容 ---"
            cat "$PYRAMID_GRADLE_FILE"
            echo "----------------------------------------------------"
          else
            echo "警告: $PYRAMID_GRADLE_FILE 文件未找到，无法修改Chaquopy的buildPython设置。"
          fi
          # --- Chaquopy 修改结束 ---
      - name: Compress Source Code
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          #zip -q -x ".git/*" -x  ".github/*" -r sourceCode-${{ env.commitS }}.zip .
          tar -cJf sourceCode-${{ env.commitS }}.tar.xz --exclude=.git --exclude=.github *
      - name: Release Apk Sign
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          signingConfigs='ICAgIHNpZ25pbmdDb25maWdzIH PossessionhciB7XAogICAgICAgICAgICBpZiAocHJvamVjdC5oYXNQcm9wZXJ0eSgiUkVMRUFTRV9TVE9SRV9GSUxFIikpIHtcCiAgICAgICAgICAgICAgICBteUNvbmZpZyB7XAogICAgICAgICAgICAgICAgICBzdG9yZUZpbGUgZmlsZShSRUxFQVNFX1NUT1JFX0ZJTEUpXAogICAgICAgICAgICAgICAgICBzdG9yZVBhc3N3b3JkIFJFTEVBU0VfU1RPUkVfUEFTU1dPUkRcCiAgICAgICAgICAgICAgICAgIGtleUFsaWFzIFJFTEVBU0VfS0VZX0FMSUFTXAogICAgICAgICAgICAgICAgICBrZXlQYXNzd29yZCBSRUxFQVNFX0tFWV9QQVNTV09SRFwKICAgICAgICAgICAgICAgICAgdjFTaWduaW5nRW5hYmxlZCB0cnVlXAogICAgICAgICAgICAgICAgICB2MlNpZ25pbmdFbmFibGVkIHRydWVcCiAgICAgICAgICAgICAgICAgIGVuYWJsZVYzU2lnbmluZyA9IHRydWVcCiAgICAgICAgICAgICAgICAgIGVuYWJsZVY0U2lnbmluZyA9IHRydWVcCiAgICAgICAgICAgICAgICB9XAogICAgICAgIH1cCiAgICB9XQo='
          signingConfig='ICAgICAgICAgICAgaWYgKHByb2plY3QuaGFzUHJvcGVydHkoIlJFTEVBU0VfU1RPUkVfRklMRSIpKSB7XAogICAgICAgICAgICAgICAgc2lnbmluZ0NvbmZpZyBzaWduaW5nQ29uZmlncy5teUNvbmZpZ1wKICAgICAgICAgICAgfVwK'
          signingConfigs="$(echo "$signingConfigs" |base64 -d )"
          signingConfig="$(echo "$signingConfig" |base64 -d )"
          sed -i -e "/defaultConfig {/i\\$signingConfigs " -e "/debug {/a\\$signingConfig " -e "/release {/a\\$signingConfig " app/build.gradle
          cp -f ${{ github.workspace }}/.github/workflows/TVBoxOSC.jks app/TVBoxOSC.jks
          sed -i '$a\RELEASE_STORE_FILE=./TVBoxOSC.jks'      ./gradle.properties
          sed -i '$a\RELEASE_KEY_ALIAS=TVBoxOSC'             ./gradle.properties
          sed -i '$a\RELEASE_STORE_PASSWORD=TVBoxOSC'        ./gradle.properties
          sed -i '$a\RELEASE_KEY_PASSWORD=TVBoxOSC'          ./gradle.properties
          sed -i 's/^#\(org.gradle.jvmargs=.*\)/\1/'        ./gradle.properties
      - uses: actions/setup-java@v4
        if: ${{ matrix.java_ver }}
        with:
          distribution: temurin
          java-version: ${{ matrix.java_ver }}
      - uses: gradle/actions/setup-gradle@v4
        if: ${{ env.commit }}
      - name: Build With Gradle
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Prepare App
        if: ${{ env.commit }}
        working-directory: TVBoxOSC
        run: |
          rm -rf apk/
          mkdir -p apk/
          for file in `find ~ -name "*release*.apk" -print`; do
            # 获取文件的基本名称
            base=$(basename "$file")
            # 如果文件是 TVBox_ 开头
            if [[ "$base" == TVBox_* ]]; then
              new_base=$(echo "$base" | sed "s/release/${{ matrix.userName }}_${{ env.tag }}/")
            else
              new_base="TVBox_${{ matrix.userName }}_${{ env.tag }}.apk"
            fi
            # 移动并重命名文件
            mv "$file" "apk/$new_base"
          done
          mv sourceCode-${{ env.commitS }}.* apk/
      - name: Release Note # 更新日志生成步骤
        if: ${{ env.commit }} # 仅在成功获取到 commit 时执行
        working-directory: TVBoxOSC # 在克隆的 TVBoxOSC 仓库目录下执行
        run: | # 多行脚本开始
          # 尝试从 workflow 仓库的 README.md 中获取上一次记录的 commit SHA
          # 同时捕获 grep 命令的退出状态
          lastCommit=$(grep "${{ matrix.userName }}\/${{ matrix.repoName }}" ${{ github.workspace }}/README.md |grep -o '[a-z0-9]\{40\}')
          grep_status=$? # 捕获 grep 管道命令的退出状态

          echo "--- Debug Info ---" # 调试信息分隔符
          # 打印 lastCommit 的值和 grep 的退出状态
          echo "Detected lastCommit from README: '$lastCommit' (grep exit status: $grep_status)"
          echo "Current commit (full): '${{ env.commit }}'" # 打印当前完整 commit SHA
          echo "Current commit (short): '${{ env.commitS }}'" # 打印当前短 commit SHA
          echo "--- End Debug Info ---"

          export LESSCHARSET=utf-8
          # 清空或创建日志文件并写入头部信息
          echo -e "Credit: [${{ matrix.userName }}](${{ env.upStream }})\nCommit: ${{ env.commit }}\nChangelog:\n\`\`\`" > apk/${{ matrix.userName }}-Release.log

          # 根据 lastCommit 是否为空或是否等于当前 commit 来决定 git log 的范围
          if [ -z "$lastCommit" ] || [ "${{ env.commit }}" == "$lastCommit" ]; then
            echo "Condition met (lastCommit empty or matches current). Running git log for single commit."
            echo "Executing git log: git log --pretty=format:%B ${{ env.commitS }} -1"
            # 只获取当前 commit 的消息 (使用短 SHA，-1 表示只取一条)
            git log --pretty=format:%B ${{ env.commitS }} -1
          else
            echo "Condition not met. Running git log for range."
            # 检查 lastCommit 是否至少有 7 个字符，避免切片错误
            if [ ${#lastCommit} -lt 7 ]; then
              echo "Error: lastCommit '$lastCommit' is too short to slice."
              # 可以选择在此处退出或改变行为，例如只获取最新 commit
              git log --pretty=format:%B ${{ env.commitS }} -1 # 发生错误时回退到只获取最新 commit
            else
              echo "Executing git log: git log --pretty=format:%B ${lastCommit:0:7}...${{ env.commitS }}"
              # 获取 lastCommit 到当前 commit 之间的 commit 消息 (不包含 lastCommit)
              # 修正的 git log 范围语法: <旧commit>...<新commit>
              git log --pretty=format:%B ${lastCommit:0:7}...${{ env.commitS }}
            fi
          fi | \
          # 后续管道处理 commit 消息：
          # 1. 将两个或多个空格替换为换行符
          # 2. 删除合并相关的行
          # 3. 删除空行
          # 4. 给每行编号
          # 5. 按消息内容排序后再按编号排序，以便使用 uniq -f1 去重（只比较消息内容）
          # 6. 再次按原始编号排序恢复原始顺序
          # 7. 去掉编号
          # 8. 将最终结果追加到日志文件
          sed -e "s# \{2,\}#\n#g" \
              -e "/^Merge \(pull\|branch\|remote\)/d" \
              -e '/^$/d' \
              -e '/^$/d' | \
          cat -n | \
          sort -k2,2 -k1,1n | \
          uniq -f1 | \
          sort -k1,1n | \
          cut -f2- >> apk/${{ matrix.userName }}-Release.log

          echo -e '\n```' >> apk/${{ matrix.userName }}-Release.log # 多行脚本结束
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v4
        if: ${{ env.commit }}
        with:
          name: ${{ matrix.userName }}-${{ matrix.repoName }}
          path: |
            TVBoxOSC/apk/*
      - name: Whether Or Not to Publish
        if: ${{ inputs.donotpublish && env.commit }}
        run: |
          echo "commit=" >> $GITHUB_ENV
  clean:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Delete older workflow runs and artifacts
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 14
          keep_minimum_runs: 10
